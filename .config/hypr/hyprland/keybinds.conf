# vim:fileencoding=utf-8:ft=config:fdm=marker foldlevel=0

# In vim/neovim, press `z' `a' to toggle folding.

# The sequence in SuperShiftAlt or SuperAltShift does not matter to hyprland.
# But let's make a rule for consistency:
# Super - Alt - Shift - Control 
# Basically in order of length of their names (from short to long),
# but Super is so commonly used so it should be the first one.

# ############################ Windows and Workspaces ##############################
$ws=~/.config/ags/scripts/hyprland/workspace_action.sh

# {{{ ========== Windows ==========
# ### Move focus #####
bind = Super, H, movefocus, l
bind = Super, L, movefocus, r
bind = Super, K, movefocus, u
bind = Super, J, movefocus, d

# ### Swap windows #####
bind = SuperShift, H, movewindow, l
bind = SuperShift, L, movewindow, r
bind = SuperShift, K, movewindow, u
bind = SuperShift, J, movewindow, d

# ### Window resize #####
binde = SuperAlt, H, resizeactive, -50 0
binde = SuperAlt, L, resizeactive, 50 0
binde = SuperAlt, K, resizeactive, 0 -50
binde = SuperAlt, J, resizeactive, 0 50
# binde = SuperAlt, H, splitratio, -0.1
# binde = SuperAlt, L, splitratio, 0.1
# binde = SuperAlt, K, splitratio, -0.1
# binde = SuperAlt, J, splitratio, 0.1

# ### Misc #####
bindl = Super, X, killactive,
bindl = SuperShift, X, exec, hyprctl kill
bind = SuperAlt, Space, togglefloating, 
binde = Super, semicolon, togglesplit,
bind = Super, F, fullscreen, 0
# bind = Super, D, fullscreen, 1
bind = Super_Alt, F, fakefullscreen, 0
# Move/resize windows with Super + LMB/RMB and dragging
bindm = Super, Z, movewindow
bindm = Super, mouse:272, movewindow
bindm = Super, mouse:273, resizewindow
bindm = Super, mouse:274, movewindow
# bind = ControlSuper, Backslash, resizeactive, exact 640 480
bindle = SuperControl, H, exec, ydotool key 105:1 105:0
bindle = SuperControl, L, exec, ydotool key 106:1 106:0
bindle = SuperControl, K, exec, ydotool key 103:1 103:0 
bindle = SuperControl, J, exec, ydotool key 108:1 108:0

# }}}EndOf ===== Windows

# {{{ ========== Workspaces ==========
# ### goto #####
bind = Super, 1, exec,$ws workspace 1
bind = Super, 2, exec,$ws workspace 2
bind = Super, 3, exec,$ws workspace 3
bind = Super, 4, exec,$ws workspace 4
bind = Super, 5, exec,$ws workspace 5
bind = Super, 6, exec,$ws workspace 6
bind = Super, 7, exec,$ws workspace 7
bind = Super, 8, exec,$ws workspace 8
bind = Super, 9, exec,$ws workspace 9
bind = Super, 0, exec,$ws workspace 10
bind = Super, grave, togglespecialworkspace,
bind = Super, BracketLeft, workspace, -1
bind = Super, BracketRight, workspace, +1
bind = Super, Minus, workspace, -10
bind = Super, Equal, workspace, +10
bind = Super, mouse_up, workspace, +1
bind = Super, mouse_down, workspace, -1
# bind = Super, Tab, cyclenext
# bind = Super, Tab, bringactivetotop,   # bring it to the top

# ### move #####
bind = SuperShift, 1, exec,$ws movetoworkspacesilent 1
bind = SuperShift, 2, exec,$ws movetoworkspacesilent 2
bind = SuperShift, 3, exec,$ws movetoworkspacesilent 3
bind = SuperShift, 4, exec,$ws movetoworkspacesilent 4
bind = SuperShift, 5, exec,$ws movetoworkspacesilent 5
bind = SuperShift, 6, exec,$ws movetoworkspacesilent 6
bind = SuperShift, 7, exec,$ws movetoworkspacesilent 7
bind = SuperShift, 8, exec,$ws movetoworkspacesilent 8
bind = SuperShift, 9, exec,$ws movetoworkspacesilent 9
bind = SuperShift, 0, exec,$ws movetoworkspacesilent 10
bind = SuperShift, grave, movetoworkspacesilent, special
bind = SuperShift, BracketLeft, movetoworkspace, -1
bind = SuperShift, BracketRight, movetoworkspace, +1
bind = SuperShift, Minus, movetoworkspace, -10
bind = SuperShift, Equal, movetoworkspace, +10
bind = SuperShift, mouse_down, movetoworkspace, -1
bind = SuperShift, mouse_up, movetoworkspace, +1

# }}}EndOf ===== Workspaces


# ############################ Actions ##############################

# {{{ ========== Settings & Configs ==========
# ### Settings & Configs #####
bind = SuperControl, I, exec, XDG_CURRENT_DESKTOP="gnome" gnome-control-center
bind = SuperControl, V, exec, pavucontrol 
bind = ShiftControl, Escape, exec, gnome-system-monitor
bind = AltShiftControl, Escape, exec, tilix -t 'btop' -e btop
# bind = SuperShift, I, exec, ~/.local/bin/guifetch

# ### Plugins #####
# Testing
# bind = SuperAlt, f12, exec, notify-send "Hyprland version: $(hyprctl version | head -2 | tail -1 | cut -f2 -d ' ')" "owo" -a 'Hyprland keybind'
# bind = SuperAlt, f12, exec, notify-send "Millis since epoch" "$(date +%s%N | cut -b1-13)" -a 'Hyprland keybind'
# bind = Super+Alt, f12, exec, notify-send 'Test notification' "Here's a really long message to test truncation and wrapping\nYou can middle click or flick this notification to dismiss it!" -a 'Shell' -A "Test1=I got it!" -A "Test2=Another action"
# bind = Super+Alt, Equal, exec, notify-send "Urgent notification" "Ah hell no" -u critical -a 'Hyprland keybind'

# ### Languages #####
# bind = SuperShift, V, exec, ~/.config/eww/scripts/language --switch '{"name":"Vietnamese","name_abbr":"VIE","name_ibus":"Bamboo::Us","name_method":"Vietnamese Telex (Bamboo Engine)"}' &
# bind = SuperShift, E, exec, ~/.config/eww/scripts/language --switch '{"name":"English (United States)","name_abbr":"ENG","name_ibus":"xkb:us::eng","name_method":"US"}' &
# bind = Super, Space, exec, ~/.config/eww/scripts/language --cycle &

# }}}EndOf ===== Settings & Configs

# {{{ ========== Applications ==========
# ### App launcher #####
bind = Super, Slash, exec, pkill fuzzel || LANG=en_US.UTF-8 fuzzel --icon-theme=candy-icons --background-color=1D1D27ee --text-color=cdd6f4ff --match-color=AC16C7FF --border-width=3 --border-radius=10 --border-color=8701E7FF	 --selection-color=585b70ff --selection-text-color=cdd6f4ff --selection-match-color=AC16C7FF --font="Torus 16"  --prompt="    "
# bind = SUPER, A, exec, ~/.config/eww/scripts/toggle-dashfs.sh --keypress &
# bind = SUPERSHIFT, D, exec, ~/.config/eww/scripts/toggle-dash.sh --keypress &

# ### Misc #####
bind = Super, Return, exec, tilix
bind = ShiftSuper, Return, exec, foot

# }}}EndOf ===== Applications

# {{{ ========== Widgets ==========
# ### Power & Lockscreen #####
bind = Super, Delete, exec, pkill wlogout || wlogout -p layer-shell
bind = AltControl, Delete, exec, ags -t 'session' # Power
bind = Super, F1, exec, swaylock
# bindl = SuperShift, F1, exec, sleep 0.1 && systemctl suspend || loginctl suspend
bind = SuperAltShiftControl, Delete, exec, systemctl poweroff || loginctl poweroff

# ### MISC #####
bindr = SuperControl, R, exec, killall ags ydotool; ags &
bindr = SuperAltControl, R, exec, hyprctl reload; killall ags ydotool; ags &
bind = Super, Period, exec, pkill fuzzel || ~/.local/bin/fuzzel-emoji
# bind = Super, Period, exec, pkill wofi || wofi-emoji
bind = SuperControl, T, exec, ~/.config/ags/scripts/color_generation/switchwall.sh
# bindir = Super, Super_L, exec, ags -t 'overview'
bind = Super, Tab, exec, ags -t 'overview'
bind = SuperShift, Slash, exec, for ((i=0; i<$(xrandr --listmonitors | grep -c 'Monitor'); i++)); do ags -t "cheatsheet""$i"; done
bind = SuperControl, BracketLeft, exec, ags -t 'sideleft'
bind = SuperControl, BracketRight, exec, ags -t 'sideright'

bind = Super, Comma, exec, ags run-js 'openColorScheme.value = true; Utils.timeout(2000, () => openColorScheme.value = false);'
# On screen keyboard
# bind = Super, K, exec, for ((i=0; i<$(xrandr --listmonitors | grep -c 'Monitor'); i++)); do ags -t "osk""$i"; done

# }}}EndOf ===== Widgets

# {{{ ========== Capture ==========
# ### Screenshot #####
# bind = SuperAlt, S, exec,~/.local/bin/rubyshot | wl-copy
bindl=,Print,exec,grim - | wl-copy
#bind = Super, S, exec, grim -g "$SLURP_COMMAND" - | wl-copy
#bind = Super, S, exec, grim -g "$(slurp)" - | wl-copy

# When using 10-bit color for monitor in Hyprland, `grimblast --freeze` will cause unexpected oversaturated color, which is caused by `hyprpicker -r -z` it used. Even if disabled 10-bit color, it still requires a system reboot to come back to normal.
bind = Super, S, exec, ~/.config/ags/scripts/grimblast.sh --freeze copy area

bind = SuperShift, S, exec, grim -g $SLURP_COMMAND - | swappy -f -

# ### OCR #####
# Normal
# bind = SuperShiftControl,S,exec,grim -g $SLURP_COMMAND "tmp.png" && tesseract "tmp.png" - | wl-copy && rm "tmp.png"
# # English
# bind = SuperShift,T,exec,grim -g $SLURP_COMMAND "tmp.png" && tesseract -l eng "tmp.png" - | wl-copy && rm "tmp.png"
# # Japanese
# bind = SuperShift,J,exec,grim -g $SLURP_COMMAND "tmp.png" && tesseract -l jpn "tmp.png" - | wl-copy && rm "tmp.png"
bind = SuperShiftControl,S,exec,grim -g "$(slurp)" "tmp.png" && tesseract "tmp.png" - | wl-copy && rm "tmp.png"
# bind = SuperShift, G, exec, grim -g "$(slurp)" "tmp.png" && tesseract "tmp.png" - -l eng+chi_sim | wl-copy && rm "tmp.png"

# ### Color picker, Clipboard history #####
bind = SuperShift, C, exec, hyprpicker -a
# bind = Super, V, exec, pkill fuzzel || cliphist list | fuzzel --no-fuzzy --dmenu | cliphist decode | wl-copy
# bind = Super, V, exec, pkill fuzzel || cliphist list | fuzzel --no-fuzzy --dmenu | cliphist decode | wl-copy
bind = Super, V, exec, pkill fuzzel || cliphist list | fuzzel --no-fuzzy --icon-theme=candy-icons --background-color=1D1D27ee --text-color=cdd6f4ff --match-color=AC16C7FF --border-width=3 --border-radius=10 --border-color=8701E7FF	 --selection-color=585b70ff --selection-text-color=cdd6f4ff --selection-match-color=AC16C7FF --font="Torus"  --prompt="   " --dmenu | cliphist decode | wl-copy
# bind = SUPER, B, exec, copyq menu 

# ### Recorder #####
bind = Super, G, exec, ~/.config/ags/scripts/record-script.sh
bind = SuperShift, G, exec, ~/.config/ags/scripts/record-script.sh --fullscreen-sound

# }}}EndOf ===== Capture

# {{{ ========== Media related ==========
# ### Volume #####
# Toggle mute
# bindl  = , XF86AudioMute, exec, pactl set-sink-mute @DEFAULT_SINK@ toggle
# Switch to mute
bindl  = , XF86AudioMute, exec, wpctl set-volume @DEFAULT_AUDIO_SINK@ 0%
bindl  = , XF86AudioMute, exec, ags run-js 'indicator.popup(1);'
bindle = , XF86AudioRaiseVolume, exec, wpctl set-volume -l 1 @DEFAULT_AUDIO_SINK@ 5%+
bindle = , XF86AudioLowerVolume, exec, wpctl set-volume @DEFAULT_AUDIO_SINK@ 5%-
bindle = , XF86AudioRaiseVolume, exec, ags run-js 'indicator.popup(1);'
bindle = , XF86AudioLowerVolume, exec, ags run-js 'indicator.popup(1);'

# ### Brightness ##### 
# bindle=, XF86MonBrightnessUp, exec, brightnessctl set '12.75+'
# bindle=, XF86MonBrightnessDown, exec, brightnessctl set '12.75-'
# bindle = , XF86MonBrightnessUp, exec, ags run-js 'brightness.screen_value += 0.05;'
# bindle = , XF86MonBrightnessUp, exec, ags run-js 'indicator.popup(1);'
# bindle = , XF86MonBrightnessDown, exec, ags run-js 'brightness.screen_value -= 0.05;'
# bindle = , XF86MonBrightnessDown, exec, ags run-js 'indicator.popup(1);'
bindle = Super, Prior, exec, ~/.local/bin/clightctl backlight r
bindle = Super, Next, exec, ~/.local/bin/clightctl backlight l
bindle = , XF86MonBrightnessUp, exec, ~/.local/bin/clightctl backlight r
bindle = , XF86MonBrightnessDown, exec, ~/.local/bin/clightctl backlight l

# ### Media player ##### 
# bind = SuperShift, N, exec, playerctl next || playerctl position `bc <<< "100 * $(playerctl metadata mpris:length) / 1000000 / 100"`
# bindl  = , XF86AudioNext,           exec, ags run-js "ags.Service.mpris.getPlayer()?.next()"
# bind = SuperShift, B, exec, playerctl previous
# bind = SuperShift, P, exec, playerctl play-pause
bind = SuperShift, N, exec, playerctl next || playerctl position `bc <<< "100 * $(playerctl metadata mpris:length) / 1000000 / 100"`
# bindl= ,XF86AudioNext, exec, playerctl next || playerctl position `bc <<< "100 * $(playerctl metadata mpris:length) / 1000000 / 100"`
bindl= ,XF86AudioNext, exec, playerctl position 5+ -p plasma-browser-integration
bindl= ,XF86AudioPrev, exec, playerctl position 5- -p plasma-browser-integration
bind = SuperShift, B, exec, playerctl previous
bind = SuperShift, P, exec, playerctl play-pause
bindl= ,XF86AudioPlay, exec, playerctl play-pause -p strawberry
bindl= ,XF86AudioPlay, exec, playerctl play-pause -p firefox
bindl= ,XF86Tools, exec, playerctl play-pause -p strawberry
bind = Super, M, exec, ags run-js 'openMusicControls.value = (!mpris.getPlayer() ? false : !openMusicControls.value);' # TODO
# }}}EndOf ===== Media related

